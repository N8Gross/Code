 late 1980s design philsophoy is designed around readability.. this is accomplished using white space to alleniate codeblocks
# instead of brackets, etc .. minimalist and clean syntax.. Python 2 legacy/old language... the creator wanted to make it better and made
# 3. These things are not backwards compatible with python 2.. kind of creates a bit of a headache.
# Python 3 has caught up and new developers use it. Python is all about white space.

# P R I N T I N G

# print ("Hello")
# print ("World")   #Unexpected indent, becareful with white space as spaces can.. indent with 4 spaces, dont use tabs
# print("!")

# V A R I A B L E S
'''
Names are case sensitive and may begin with:
    letters, $, _
After, may include
    letters, numbers, $, _
Convention says
    Start with a lowercase word, then additional words are speparated by underscore
    ex. my_first_variable
'''
from typing import List, Union

'''
name = "Nate"  #Strings
age = 30        #Integer
gpa = 3.5       #Decimal // double// floats
is_tall = True  #BooLean --> True/False
name = "John"
#2 ways to do this 
print ("Your name is " + name) #cacatinating inside the variable 
print ("Your name is", name)  #or do it this way 
'''

# C A S T I N G & C O N V E R T I NG
'''
print (int(3.14)) #double convers to 3 
print (float(3)) #converts to 3.0 decimal
print (str(True) ) #comes out true 
print (int ("50") +int ("70")) #equals 120 
'''

# S T R I N G S
''''
greeting = "Hello"
#indexes:   01234
print( len(greeting) )#counting how many elements in string
print ( greeting[0] ) #will print out H for index 0 
print (greeting[-1] ) #Will read the array backwards 
print ( greeting.find("llo"))#will tell me what index position it starts
print (greeting.find("z"))# isnt inside the array, will give you -1 
print ( greeting [2:] ) #will start at index 2 and print out the rest 
print  (greeting [2:3] ) #start @ 2, end at 3.  Should print l
'''

# N U M B E R S
''''
print ( 2 * 3 ) #Basic Arithmetic  +, -, /, *
print ( 2**3 ) #Basic Arithmetic: +, -, /, * #2 to the power of 3
print ( 10 % 3 ) #Modulus Op. returns remainder of 10/3
print ( 1+2*3) #order of operations
print ( 10 / 3.0) #int's and doubles
num = 10
num += 100 # +=, -=, /=, *=
print (num)
++num
print (num)
# Math class has useful math methods
import math #importing math modules 
print ( pow(2, 3) )
print ( math.sqrt(144) )
print ( round (2.7) )
'''

# U S E R      I N P U T
'''
name = input ("Enter your name: ")
print("Hello", name + "!")
num1 = int (input ("Enter First Num: " ))
num2 = int (input(" Enter Second Num: "))
print (num1 + num2)
'''

# L I S T S
# Similar to arrays.
'''
lucky_numbers = [4, 8, "fifteen", 16, 23, 42.0] #Python allows for you to type in different elements such as "fifteen" w/ integer "10"
 #        indexes 0  1      2       3   4   5
lucky_numbers[0] = 90
print (lucky_numbers [0]) #prints out 90 because we declared immediately at the top that 0 = 90
print (lucky_numbers [1]) #prints out 8
print (lucky_numbers [-1]) #Reverse index, prints out 42.0
print (lucky_numbers [2:]) #Starts @ index 2 and prints all the way until the end
print (lucky_numbers [2:4]) #Starts & prints at index 2 and all the way to index 4
print(len (lucky_numbers)) #how many in the list/array? 6
'''

# N Dimensional Lists
# Multiple dimensional lists, can go 3, 4, 5 dimensional lists if you want to.
'''
numberGrid = [ [1, 2], [3,4] ] #Additional arrays inside
numberGrid[0][1] = 99 #0 is calling out first array and first element (1)... [1] = 99 and shows 99.
print (numberGrid[0][0])
print(numberGrid[0][1])
'''

# L I S T     F U N C T I O N S

'''
friends = []
friends.append ("Oscar") #append elements onto the end of the list
friends.append ("Angela")
friends.insert(1, "Kevin") #can insert element in the position you want.
#friends.remove ("Kevin") #When you take comment out, this will remove Kevin from the list/array 
print (friends)
print ( friends.index("Oscar")) #What index is Oscar in the array
print (friends.count ("Angela")) #How many times a specific element shows up in the list
friends.sort() #Sort alphabetically
print ( friends )
friends.clear() #Clear an array
print (friends)  #Empty array now
'''

# T U P L E S
'''
lucky_numbers = (4, 8, "fifteen", 16, 23, 42.0) #Difference is you cannot modify this array. Also "()" instead of "[]"
 #        indexes 0  1      2       3   4   5
#lucky_numbers[0] = 90
print (lucky_numbers [0]) #prints out 90 because we declared immediately at the top that 0 = 90
print (lucky_numbers [1]) #prints out 8
print (lucky_numbers [-1]) #Reverse index, prints out 42.0
print (lucky_numbers [2:]) #Starts @ index 2 and prints all the way until the end
print (lucky_numbers [2:4]) #Starts & prints at index 2 and all the way to index 4
print(len (lucky_numbers)) #how many in the list/array? 6
'''

# F U N C T I O N S
'''
def add_numbers (num1, num2=99): #Since Python is dynamic, you don't have to specify data type.
    return num1 + num2
#keep note that since Python uses white space, indenting here shows that this code is part of the function.
#Once the code (like below) is aligned with first line of function- it will treat it as separate code.
sum = add_numbers (4,3) #If you remove the 3, Python will plug in num2=99 automatically and give you answer of 103. 
print (sum)
'''

# I F        S T A T E M E N T S
'''
is_student = False
is_smart = False
if is_student and is_smart:
    print ("You are a student")
elif is_student and not (is_smart): #elif = elseif, "not is smart" -negation operation i.e. not is smart is going to give us opposite of the boolean.
    print ("You are not a smart student")
else:
    print ("You are not a student and not smart")
#If not booleans, can also use comparisons to code below: 
# > , <, >=, <=, !=, ==
if 1 > 3:
    print("number omparison was true")
if "dog" == "cat":
    print ("string compariso was true")
   '''

# D I C T I O N A R I E S
# Like a list, but instead "[]", we'll use "curly brackets" "{}"
''' 
test_grades = {
    "Andy" :"B+",
    "Stanley" : "C",
    "Ryan" : "A",
    3 : 95.2
}
print ( test_grades["Andy"])
print ( test_grades.get ("Ryan", "No Student Found")) #two arguments. First argument for Ryan would return "A". If you put Doug in first paramater- it would say "Student not found" (2nd paramater). 
print ( test_grades[3]) #This isn't grabbing at index position 3, it's grabbing the declared 3 above. 
'''

# W H I L E         L O O P S
'''
index = 1
while index <= 5:
    print (index)
    index += 1   #Prints out values 1-5. Watch out for infinite loops. 
'''

# F O R         L O O P S
# 3 different types below Choose to edit one out before running code.
'''
#for index in range(5): #Range will go 0-4, printing out 5 times starting at 0.
    #print (index)
#lucky_nums = [4, 8, 15, 16, 23, 42]
#for lucky_num in lucky_nums:
#    print(lucky_num) #Will print cascade the array.
for letter in "Giraffe":
 print(letter) #Cascade letters to spell Giraffe. 
 '''

# E X C E P T I O N         C A T C H I N G
# In the case of you wanting to dive by 10/ 0 in only compiling the line below, you would receive an error.
# In the case of you wanting to type in the letter "a" for 10 / "a", you would receive an error. We're going to catch these.
'''
#answer = 10 / int(input ("Enter Number: "))
#try :
#       answer = 10 / int (input("Enter Number: "))
#except:
#   print ("Error") #Prints error in the case of putting a character that doesn't make sense
try:
      answer = 10 / int (input ("Enter Number: "))
except ZeroDivisionError as e:
   print(e)  #prints "division by 0"
except:
   print ("Caught an exception")  # Big no-no, use this wisely as this is very broad/vague 
'''

# OBJECT         ORIENTATION
'''
class Book:
    def __init__(self, title, author): #constructor .. will pass in "self" = object being created
        self.title = title
        self.author = author
    def read_book(self):
            print("Reading", self.title, "by", self.author)
book1 = Book("Harry Potter", "JK Rowling")
#book1.title = "Half-Blood Prince" #Will modify the title and update it. 
print(book1.title)
book1.read_book()
'''


# Getters  &  Setters
# Allows you to control the access that outside code has to the attributes of your class
'''
class Book:
    def __init__(self, title, author): #constructor .. will pass in "self" = object being created
        self.title = title
        self.author = author
    @property  # Defining a property, creating a function for specific attribute
    def title(self):
        print("getting title")  # getter
        return self._title  # _ makes this private
    @title.setter  # setter
    def title(self, value):
        print("setting title")
        self._title = value
    @title.deleter
    def title(self):
        del self._title
    def read_book(self):
            print("Reading", self.title, "by", self.author)
book1 = Book("Harry Potter", "JK Rowling")
#book1.title = "Half-Blood Prince" #Will modify the title and update it.
print(book1.title)
book1.read_book()
'''

# Inheritance
''''
class Chef:
    def make_chicken(self):
        print("The chef makes chicken")
    def make_salad(selfs):
        print("The chef makes salad")
    def make_special_dish(self):
        print("The chef makes bbq ribs")
class ItalianChef(Chef): #Passing in chef will make italian chef inherit Chef's abilities 
    def make_pasta(selfS):
        print("The chef makes pasta")
    def make_special_dish(self):
        print ("The chef makes chicken parm")
myChef = Chef()
myChef.make_chicken()
myItalianChef = ItalianChef() 
myItalianChef.make_chicken()#Technically there's no code under italian chef to make him make chicken, but we inherited from Chef. 
'''

#Inheritance #2
#Using init function/using constructor in a sub class.

class Chef:
    def __init__(self, name, age): #2 attributes name and age being passed in as paramaters
        self.name = name
        self.age = age

    def make_chicken(self):
        print("The chef makes chicken")

    def make_salad(selfs):
        print("The chef makes salad")

    def make_special_dish(self):
        print("The chef makes bbq ribs")

class ItalianChef(Chef): #Passing in chef will make italian chef inherit Chef's abilities

    def __init__(self, name, age, country_of_origin): #newly added
        self.country_of_origin = country_of_origin
        super().__init__(name,age) #Super calling super classes constructor. Basically initilizing the name and age we inherited from super class.

    def make_pasta(selfS):
        print("The chef makes pasta")

    def make_special_dish(self):
        print ("The chef makes chicken parm")

myChef = Chef("Gordon Ramsay", 50)
myChef.make_chicken()

myItalianChef = ItalianChef("Massimo Bottura", 55, "Italy")
myItalianChef.make_chicken()
print(myItalianChef.age); #prints 55